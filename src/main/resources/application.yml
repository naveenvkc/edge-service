server:
  port: 9000
  netty:
    connection-timeout: 2s
    idle-timeout: 15s
  shutdown: graceful

spring:
  application:
    name: edge-service
  lifecycle:
    timeout-per-shutdown-phase: 15s
  cloud:
    gateway:
      httpclient:
        connect-timeout: 2000
        response-timeout: 5s
        pool:
          type: elastic
          max-idle-time: 15s
          max-life-time: 60s
      default-filters:
        - SaveSession
        - TokenRelay
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
              requestedTokens: 1
        - name: Retry
          args:
            retries: 3
            methods: GET
            series: SERVER_ERROR
            exceptions: java.io.IOException, java.util.concurrent.TimeoutException
            backoff:
              firstBackoff: 50ms
              maxBackOff: 500ms
              factor: 2
              basedOnPreviousValue: false
      routes:
        - id: spa-route
          uri: ${SPA_URL:http://localhost:9004}
          predicates:
            - Path=/,/*.css,/*.js,/favicon.ico
        - id: catalog-route
          uri: ${CATALOG_SERVICE_URL:http://localhost:9001}
          predicates:
            - Path=/app/catalog-api/**
          filters:
            - PathGatewayFilter
            - name: CircuitBreaker
              args:
                name: catalogCircuitBreaker
                fallbackUri: forward:/catalog-fallback
        - id: orders-route
          uri: ${ORDER_SERVICE_URL:http://localhost:9002}
          predicates:
            - Path=/app/order-api/**
          filters:
            - PathGatewayFilter
            - name: CircuitBreaker
              args:
                name: orderCircuitBreaker
  data:
    redis:
      connect-timeout: 2s
      host: localhost
      #port: 6379
      timeout: 1s
  session:
    store-type: redis
    timeout: 10m
    redis:
      namespace: polar:edge
  main:
    allow-bean-definition-overriding: true
  security:
    oauth2:
      client:
        registration:
          keycloak:
            client-id: edge-service
            client-secret: polar-keycloak-secret
            #client-secret: 6W4aw6IxRrDanSL88GEjNMgF868cQE10
            #authorization-grant-type: authorization_code
            #redirect-uri: '{baseUrl}/login/oauth2/code/{registrationId}'
            scope: openid,roles
        provider:
          keycloak:
            #issuer-uri: http://localhost:8080/realms/PolarBookshop-1
            issuer-uri: http://localhost:8080/realms/PolarBookshop

resilience4j:
  circuitbreaker:
    configs:
      default:
        slidingWindowSize: 20
        permittedNumberOfCallsInHalfOpenState: 5
        failureRateThreshold: 50
        waitDurationInOpenState: 15000
  timelimiter:
    configs:
      default:
        timeoutDuration: 5s

logging:
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"
#    io:
#      github:
#        resilience4j: DEBUG
#    org:
#      springframework:
#        security: DEBUG

management:
  endpoints:
    web:
      exposure:
        include: health, prometheus
  endpoint:
    health:
      show-details: always
      show-components: always
      probes:
        enabled: true
      group:
        readiness:
          include: readinessState,redis
  metrics:
    tags:
      application: ${spring.application.name}